# -*- coding: utf-8 -*-
"""Image Classification Model Deployment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cxRrSbvxhgs6Rl9X_yBL7C_cngkIelAQ

## **PUTRI NUR AINI MAHFUDZ (M203Y0411)**
## **Proyek Akhir : Image Classification Model Deployment**

---

## Berikut ini Proyek Akhir : Image Classification Model Deployment yang saya kerjakan dengan memenuhi kriteria submission yang ada.

Dataset didapatkan dari : https://www.kaggle.com/datasets/alxmamaev/flowers-recognition

## Steps:

### 1.  Melakukan ekstraksi pada file zip yang sudah disimpan di direktori
"""

import zipfile, os
local_zip = '/tmp/flowers.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

"""### 2. Melihat isi direktori"""

base_dir = os.path.join('/tmp/flowers')
labels = os.listdir(base_dir)

label_and_items = {}

for label in labels:
  items = os.listdir(os.path.join(base_dir, label))
  label_and_items[label] = len(items)

label_and_items

"""### 3. Melakukan pre-processing pada dataset"""

import shutil
def remove_label(label):
  shutil.rmtree(os.path.join(base_dir, label))
  labels.remove(label)
  label_and_items.pop(label)

remove_label('dandelion')
remove_label('tulip')

label_and_items

"""### 4. Menerapkan ImageDataGenerator

*   import ImageDataGenerator
*   melakukan augmentasi gambar pada setiap sampel di dataset
*   melakukan pemisahan data menjadi data latih dan data validasi
"""

import tensorflow as tf
from tensorflow import keras
from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255.0,
                     rotation_range=20,
                     shear_range=0.2,
                     zoom_range=0.2,
                     horizontal_flip=True,
                     vertical_flip=True,
                     fill_mode='nearest',
                     validation_split=0.2)

"""### 5. Menyiapkan data latih dan validasi dari kumpulan data gambar yang di-load dalam memori melalui fungsi flow()"""

train_generator = train_datagen.flow_from_directory(
            base_dir,
            target_size=(150, 150),
            batch_size=32,
            class_mode='categorical',
            subset='training')
    
validation_generator = train_datagen.flow_from_directory(
            base_dir,
            target_size=(150, 150),
            batch_size=32,
            class_mode='categorical',
            subset='validation')

"""### 6. Membangun model menggunakan model sequential"""

model = keras.Sequential([
    tf.keras.layers.Conv2D(16, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(len(labels), activation='softmax')
])

"""### 7. Melihat summary dari arsitektur model yang telah kita buat"""

model.summary()

"""### 8. Melakukan compile model dengan 'adam' optimizer loss function 'categorical_crossentropy'"""

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

"""### 9. Menerapkan Callback"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if logs.get('accuracy') >= 0.85 and logs.get('val_accuracy') >= 0.85:
      print('STOP')
      self.model.stop_training = True

callbacks = myCallback()

"""### 10. Melatih model dengan model.fit"""

history=model.fit(
      train_generator,
      steps_per_epoch=4,  #berapa batch yang akan dieksekusi pada setiap epoch
      epochs=100, #tambahkan epochs jika akurasi model belum optimal
      validation_data=validation_generator, #menampilkan akurasi pengujian data validasi
      validation_steps=4,  #berapa batch yang akan dieksekusi pada setiap epoch
      verbose=2,
      callbacks=[callbacks])

"""### 11. Melihat visualisasi nilai akurasi dan loss"""

import matplotlib.pyplot as plt    

acc = history.history['accuracy']                                                
val_acc = history.history['val_accuracy']                                         
loss = history.history['loss']                                                    
val_loss = history.history['val_loss']                                            

epochs = range(len(acc))                                                          

plt.plot(epochs, acc, 'r', label='Accuracy')                                                 
plt.plot(epochs, val_acc, 'b', label='Val_accuracy')                          
plt.title('Accuracy & Val_accuracy')                                        
plt.legend(loc=0)                                                                 
plt.figure()                                                                      
plt.show()

plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation_loss')
plt.title('Loss & Validation_Loss')
plt.legend(loc=0)
plt.figure()
plt.show()

print(train_generator.class_indices)

"""### 12. Uji coba model dengan mengupload gambar"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  path = fn
  img = image.load_img(path, target_size=(150, 150))
 
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
 
  classes = model.predict(images, batch_size=32)  
  print(fn)
  if classes[0][0]==1:
    print('daisy')                                 
  elif classes[0][1]==1:
    print('rose')                                   
  elif classes[0][2]==1:
    print('sunflower')                                
  else:
    print('UNKNOWN')

"""### 13. Menyimpan model dalam formatTF-Lite"""

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile("model.tflite", "wb") as f:
  f.write(tflite_model)

"""## **Terimakasih.**

## **Submission project kelas Belajar Pengembangan Machine Learning - 2022** 
"""